#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4961
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TanHoaWater.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="TANHOA_WATER")]
	public partial class TanHoaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLICHDOCSO(LICHDOCSO instance);
    partial void UpdateLICHDOCSO(LICHDOCSO instance);
    partial void DeleteLICHDOCSO(LICHDOCSO instance);
    partial void InsertPHUONG(PHUONG instance);
    partial void UpdatePHUONG(PHUONG instance);
    partial void DeletePHUONG(PHUONG instance);
    partial void InsertQUAN(QUAN instance);
    partial void UpdateQUAN(QUAN instance);
    partial void DeleteQUAN(QUAN instance);
    #endregion
		
		public TanHoaDataContext() : 
				base(global::TanHoaWater.Properties.Settings.Default.TANHOA_WATERConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public TanHoaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TanHoaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TanHoaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TanHoaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<LICHDOCSO> LICHDOCSOs
		{
			get
			{
				return this.GetTable<LICHDOCSO>();
			}
		}
		
		public System.Data.Linq.Table<PHUONG> PHUONGs
		{
			get
			{
				return this.GetTable<PHUONG>();
			}
		}
		
		public System.Data.Linq.Table<QUAN> QUANs
		{
			get
			{
				return this.GetTable<QUAN>();
			}
		}
	}
	
	[Table(Name="dbo.LICHDOCSO")]
	public partial class LICHDOCSO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MAQUAN;
		
		private string _MAPHUONG;
		
		private int _KY;
		
		private int _NAM;
		
		private int _DOT;
		
		private System.DateTime _NGAY;
		
		private string _NOTES;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMAQUANChanging(int value);
    partial void OnMAQUANChanged();
    partial void OnMAPHUONGChanging(string value);
    partial void OnMAPHUONGChanged();
    partial void OnKYChanging(int value);
    partial void OnKYChanged();
    partial void OnNAMChanging(int value);
    partial void OnNAMChanged();
    partial void OnDOTChanging(int value);
    partial void OnDOTChanged();
    partial void OnNGAYChanging(System.DateTime value);
    partial void OnNGAYChanged();
    partial void OnNOTESChanging(string value);
    partial void OnNOTESChanged();
    #endregion
		
		public LICHDOCSO()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_MAQUAN", DbType="Int NOT NULL")]
		public int MAQUAN
		{
			get
			{
				return this._MAQUAN;
			}
			set
			{
				if ((this._MAQUAN != value))
				{
					this.OnMAQUANChanging(value);
					this.SendPropertyChanging();
					this._MAQUAN = value;
					this.SendPropertyChanged("MAQUAN");
					this.OnMAQUANChanged();
				}
			}
		}
		
		[Column(Storage="_MAPHUONG", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string MAPHUONG
		{
			get
			{
				return this._MAPHUONG;
			}
			set
			{
				if ((this._MAPHUONG != value))
				{
					this.OnMAPHUONGChanging(value);
					this.SendPropertyChanging();
					this._MAPHUONG = value;
					this.SendPropertyChanged("MAPHUONG");
					this.OnMAPHUONGChanged();
				}
			}
		}
		
		[Column(Storage="_KY", DbType="Int NOT NULL")]
		public int KY
		{
			get
			{
				return this._KY;
			}
			set
			{
				if ((this._KY != value))
				{
					this.OnKYChanging(value);
					this.SendPropertyChanging();
					this._KY = value;
					this.SendPropertyChanged("KY");
					this.OnKYChanged();
				}
			}
		}
		
		[Column(Storage="_NAM", DbType="Int NOT NULL")]
		public int NAM
		{
			get
			{
				return this._NAM;
			}
			set
			{
				if ((this._NAM != value))
				{
					this.OnNAMChanging(value);
					this.SendPropertyChanging();
					this._NAM = value;
					this.SendPropertyChanged("NAM");
					this.OnNAMChanged();
				}
			}
		}
		
		[Column(Storage="_DOT", DbType="Int NOT NULL")]
		public int DOT
		{
			get
			{
				return this._DOT;
			}
			set
			{
				if ((this._DOT != value))
				{
					this.OnDOTChanging(value);
					this.SendPropertyChanging();
					this._DOT = value;
					this.SendPropertyChanged("DOT");
					this.OnDOTChanged();
				}
			}
		}
		
		[Column(Storage="_NGAY", DbType="DateTime NOT NULL")]
		public System.DateTime NGAY
		{
			get
			{
				return this._NGAY;
			}
			set
			{
				if ((this._NGAY != value))
				{
					this.OnNGAYChanging(value);
					this.SendPropertyChanging();
					this._NGAY = value;
					this.SendPropertyChanged("NGAY");
					this.OnNGAYChanged();
				}
			}
		}
		
		[Column(Storage="_NOTES", DbType="NVarChar(500)")]
		public string NOTES
		{
			get
			{
				return this._NOTES;
			}
			set
			{
				if ((this._NOTES != value))
				{
					this.OnNOTESChanging(value);
					this.SendPropertyChanging();
					this._NOTES = value;
					this.SendPropertyChanged("NOTES");
					this.OnNOTESChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.PHUONG")]
	public partial class PHUONG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MAQUAN;
		
		private string _MAPHUONG;
		
		private string _TENPHUONG;
		
		private EntityRef<QUAN> _QUAN;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAQUANChanging(int value);
    partial void OnMAQUANChanged();
    partial void OnMAPHUONGChanging(string value);
    partial void OnMAPHUONGChanged();
    partial void OnTENPHUONGChanging(string value);
    partial void OnTENPHUONGChanged();
    #endregion
		
		public PHUONG()
		{
			this._QUAN = default(EntityRef<QUAN>);
			OnCreated();
		}
		
		[Column(Storage="_MAQUAN", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MAQUAN
		{
			get
			{
				return this._MAQUAN;
			}
			set
			{
				if ((this._MAQUAN != value))
				{
					if (this._QUAN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMAQUANChanging(value);
					this.SendPropertyChanging();
					this._MAQUAN = value;
					this.SendPropertyChanged("MAQUAN");
					this.OnMAQUANChanged();
				}
			}
		}
		
		[Column(Storage="_MAPHUONG", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MAPHUONG
		{
			get
			{
				return this._MAPHUONG;
			}
			set
			{
				if ((this._MAPHUONG != value))
				{
					this.OnMAPHUONGChanging(value);
					this.SendPropertyChanging();
					this._MAPHUONG = value;
					this.SendPropertyChanged("MAPHUONG");
					this.OnMAPHUONGChanged();
				}
			}
		}
		
		[Column(Storage="_TENPHUONG", DbType="NVarChar(50)")]
		public string TENPHUONG
		{
			get
			{
				return this._TENPHUONG;
			}
			set
			{
				if ((this._TENPHUONG != value))
				{
					this.OnTENPHUONGChanging(value);
					this.SendPropertyChanging();
					this._TENPHUONG = value;
					this.SendPropertyChanged("TENPHUONG");
					this.OnTENPHUONGChanged();
				}
			}
		}
		
		[Association(Name="QUAN_PHUONG", Storage="_QUAN", ThisKey="MAQUAN", IsForeignKey=true)]
		public QUAN QUAN
		{
			get
			{
				return this._QUAN.Entity;
			}
			set
			{
				QUAN previousValue = this._QUAN.Entity;
				if (((previousValue != value) 
							|| (this._QUAN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._QUAN.Entity = null;
						previousValue.PHUONGs.Remove(this);
					}
					this._QUAN.Entity = value;
					if ((value != null))
					{
						value.PHUONGs.Add(this);
						this._MAQUAN = value.MAQUAN;
					}
					else
					{
						this._MAQUAN = default(int);
					}
					this.SendPropertyChanged("QUAN");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.QUAN")]
	public partial class QUAN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MAQUAN;
		
		private string _TENQUAN;
		
		private EntitySet<PHUONG> _PHUONGs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMAQUANChanging(int value);
    partial void OnMAQUANChanged();
    partial void OnTENQUANChanging(string value);
    partial void OnTENQUANChanged();
    #endregion
		
		public QUAN()
		{
			this._PHUONGs = new EntitySet<PHUONG>(new Action<PHUONG>(this.attach_PHUONGs), new Action<PHUONG>(this.detach_PHUONGs));
			OnCreated();
		}
		
		[Column(Storage="_MAQUAN", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MAQUAN
		{
			get
			{
				return this._MAQUAN;
			}
			set
			{
				if ((this._MAQUAN != value))
				{
					this.OnMAQUANChanging(value);
					this.SendPropertyChanging();
					this._MAQUAN = value;
					this.SendPropertyChanged("MAQUAN");
					this.OnMAQUANChanged();
				}
			}
		}
		
		[Column(Storage="_TENQUAN", DbType="NVarChar(50)")]
		public string TENQUAN
		{
			get
			{
				return this._TENQUAN;
			}
			set
			{
				if ((this._TENQUAN != value))
				{
					this.OnTENQUANChanging(value);
					this.SendPropertyChanging();
					this._TENQUAN = value;
					this.SendPropertyChanged("TENQUAN");
					this.OnTENQUANChanged();
				}
			}
		}
		
		[Association(Name="QUAN_PHUONG", Storage="_PHUONGs", OtherKey="MAQUAN")]
		public EntitySet<PHUONG> PHUONGs
		{
			get
			{
				return this._PHUONGs;
			}
			set
			{
				this._PHUONGs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PHUONGs(PHUONG entity)
		{
			this.SendPropertyChanging();
			entity.QUAN = this;
		}
		
		private void detach_PHUONGs(PHUONG entity)
		{
			this.SendPropertyChanging();
			entity.QUAN = null;
		}
	}
}
#pragma warning restore 1591
